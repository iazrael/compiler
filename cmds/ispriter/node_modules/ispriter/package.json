{
  "author": {
    "name": "azrael",
    "email": "azrael@imatlas.com",
    "url": "http://imatlas.com/about"
  },
  "name": "ispriter",
  "description": "an intelligent merge sprite tool",
  "version": "0.1.2",
  "homepage": "http://imatlas.com/posts/intelligent-merge-css-sprite/",
  "repository": {
    "type": "git",
    "url": "git://github.com/iazrael/ispriter.git"
  },
  "main": "./src/ispriter.js",
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "cssom": "*",
    "canvas": "*",
    "node-file": "*"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "readme": "#智能合并CSS精灵图(iSpriter)\n\n站在巨人的肩膀上\n================\n\n使用nodejs实现, 依赖[CSSOM](https://github.com/NV/CSSOM), [node-canvas](https://github.com/learnboost/node-canvas)\n\n使用 [bin-packing](https://github.com/jakesgordon/bin-packing) 算法排列图片, 后续支持选择其他算法\n\n在此, 感谢这些开源项目的作者, 以及给本项目贡献代码的同学\n\n什么是智能?\n=========\n\n编写css 文件时什么都不用管, 该用什么图片用什么图片, 该怎么定位就怎么定位, 不用改变原有的 css 编写方式\n\n发布前执行 ispriter, 所有合并图片和定位都自动帮你完成\n\n特性\n====\n\n+ 智能提取background的url和position等信息\n+ 智能判断使用了background-position（使用px为单位）定位的图片并重新定位\n+ 兼容已经合并了的图片, 并重新定位\n+ 多个css文件合并时，排除并重用已经合并的图片\n+ 智能设置被合并图片的宽高\n+ 支持设定合并后图片的最大大小\n+ 支持设置合并后的图片间距\n+ 跳过background-position是right/center/bottom的图片\n+ 跳过显式的设置平铺方式为repreat的图片\n+ 跳过设置了background-size的图片\n\n使用方法\n=======\n\n### config 文件的配置参数\n\n    {\n        \"algorithm\": \"growingpacker\",//optional 目前只有 growingpacker\n        \"input\": {\n            \"cssRoot\": \"./../test/css/\", //required\n            \"imageRoot\": \"\",//optional 默认 cssRoot\n            \"format\": \"png\"//optional\n        },\n        \"output\": {\n            \"cssRoot\": \"./../test/sprite_output/css/\",//required\n            \"imageRoot\": \"../images/\",//optional 相对于 cssRoot 的路径, 默认 \"./image/\", 最终会变成合并后的的图片路径写在css文件中\n            \"maxSize\": 60,//optional 图片容量的最大大小, 单位 KB, 默认 0\n            \"margin\": 5,//optional 合成之后, 图片间的空隙, 默认 0\n            \"prefix\": \"sprite_\",//optional \n            \"format\": \"png\"//optional 输出的图片格式\n        }\n    }\n\n### config 的最简配置\n\n    {\n        \"input\":  \"./../test/css/\", // input cssRoot\n        \"output\": \"./../test/sprite_output/css/\" // output cssRoot\n    }\n\n### 从代码中调用\n\n    var spriter = require('ispriter');\n\n    var configFile = '../src/config.example.json';\n\n    spriter.merge(configFile);\n\n### 从命令行调用\n\n    node -e \"require('ispriter').merge('../src/config.example.json')\"\n\nExample\n=======\n\n具体实例请到项目根目录下的 test 目录, 执行 node dosprite.js 体验实际效果\n",
  "_id": "ispriter@0.1.2",
  "_from": "ispriter"
}
