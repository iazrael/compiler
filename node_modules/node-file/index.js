var fs = require('fs'),
    path = require('path'),
    util = require('util')
    ;

/**
 * 创建多级目录
 * @param  {String} dirpath 路径
 * @param  {String} mode    模式
 */
var mkdirsSync = function(dirpath, mode) {
    dirpath = path.resolve(dirpath);
    // console.log(dirpath);
    if(fs.existsSync(dirpath)){
        return;
    }
    var dirs = dirpath.split(path.sep);
    // console.log(dirs);
    var dir = '';
    for(var i = 0; i < dirs.length; i++) {
        // dir += dirs[i] + '/';
        if(!fs.existsSync(dir)){
            fs.mkdirSync(dir, mode);
        }
    }
};

/**
 * 列出指定目录的所有文件
 * @param  {String} dirpath      路径
 * @param  {String} type 需要读取的文件的格式, 多类型用","分割, 如: "css,js,html"
 * @param  {Boolean} recursive 是否递归
 * @return {Array}  返回文件名数组
 */
var listFilesSync = function(dirpath, type, recursive){
    var result = [];
    if(type){
        type = type.toLowerCase().replace(/\s+/g, '');
    }
    var typeList = type ? type.split(',') : false;
    dirpath = path.resolve(dirpath);
    var list = fs.readdirSync(dirpath);
    var ext, filepath, stat;
    //把文件按文件名排序
    list.sort();
    for(var i = 0, name; name = list[i]; i++) {
        filepath = path.join(dirpath , name);
        stat = fs.statSync(filepath);
        if(stat.isFile()){
            ext = path.extname(name).substr(1);
            if(typeList && typeList.indexOf(ext) === -1){
                continue;
            }
            result.push(filepath);
        }else if(stat.isDirectory() && recursive){
            result = result.concat(listFilesSync(filepath));
        }
    };
    return result;
}

/**
 * 拷贝文件到指定目录或指定名字
 * @param  {String} src       
 * @param  {String} dst       
 * @param  {Boolean} overwrite 
 */
var copyFileSync = function (src, dst, overwrite) {
    var stat, input, output;
    // console.log('coping ' + src);
    if(!fs.existsSync(src)){
        throw 'File ' + src + ' is not exists.';
    }
    //TODO 如果文件不存在, statSync 会出错
    stat = fs.statSync(dst);
    if(stat.isFile() && !overwrite ){
        throw 'File ' + dst + ' is exists.';
    }
    if(stat.isDirectory()){
        dst = path.join(dst, path.basename(src));
        if(fs.existsSync(dst) && fs.statSync(dst).isFile() && !overwrite){
            throw 'File ' + dst + ' is exists.';
        }
    }
    input = fs.createReadStream(src);
    output = fs.createWriteStream(dst);
    input.pipe(output);
};


exports.mkdirsSync = mkdirsSync;
exports.listFilesSync = listFilesSync;
exports.copyFileSync = copyFileSync;